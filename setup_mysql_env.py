#!/usr/bin/env python3
"""
Setup script to configure MySQL environment variables for local development
Run this script to set up your MySQL connection for the WMS application
"""

import os
import sys

def setup_mysql_environment():
    """Setup MySQL environment variables"""
    print("=== WMS MySQL Configuration Setup ===")
    print()
    
    # MySQL connection details
    mysql_config = {
        'MYSQL_HOST': 'localhost',
        'MYSQL_PORT': '3306', 
        'MYSQL_USER': 'root',
        'MYSQL_PASSWORD': 'root@123',
        'MYSQL_DATABASE': 'wms_db_dev'
    }
    
    print("Default MySQL Configuration:")
    for key, value in mysql_config.items():
        print(f"  {key}: {value}")
    
    print()
    response = input("Do you want to use these default settings? (y/n): ").strip().lower()
    
    if response != 'y':
        print("\nEnter your MySQL connection details:")
        mysql_config['MYSQL_HOST'] = input(f"MySQL Host [{mysql_config['MYSQL_HOST']}]: ").strip() or mysql_config['MYSQL_HOST']
        mysql_config['MYSQL_PORT'] = input(f"MySQL Port [{mysql_config['MYSQL_PORT']}]: ").strip() or mysql_config['MYSQL_PORT']
        mysql_config['MYSQL_USER'] = input(f"MySQL User [{mysql_config['MYSQL_USER']}]: ").strip() or mysql_config['MYSQL_USER']
        mysql_config['MYSQL_PASSWORD'] = input(f"MySQL Password [{mysql_config['MYSQL_PASSWORD']}]: ").strip() or mysql_config['MYSQL_PASSWORD']
        mysql_config['MYSQL_DATABASE'] = input(f"MySQL Database [{mysql_config['MYSQL_DATABASE']}]: ").strip() or mysql_config['MYSQL_DATABASE']
    
    # Create .env file with MySQL configuration
    env_content = f"""# WMS MySQL Configuration - Auto-generated
# Generated by setup_mysql_env.py

# Flask Configuration
SESSION_SECRET=wms-dev-secret-key-change-in-production

# MySQL Database Configuration (Primary)
MYSQL_HOST={mysql_config['MYSQL_HOST']}
MYSQL_PORT={mysql_config['MYSQL_PORT']}
MYSQL_USER={mysql_config['MYSQL_USER']}
MYSQL_PASSWORD={mysql_config['MYSQL_PASSWORD']}
MYSQL_DATABASE={mysql_config['MYSQL_DATABASE']}

# Alternative: Direct DATABASE_URL for MySQL
DATABASE_URL=mysql+pymysql://{mysql_config['MYSQL_USER']}:{mysql_config['MYSQL_PASSWORD']}@{mysql_config['MYSQL_HOST']}:{mysql_config['MYSQL_PORT']}/{mysql_config['MYSQL_DATABASE']}

# SAP B1 Integration Configuration
SAP_B1_SERVER=https://192.168.0.194:50000
SAP_B1_USERNAME=manager
SAP_B1_PASSWORD=1422
SAP_B1_COMPANY_DB=EINV-TESTDB-LIVE-HUST

# Application Settings
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print()
    print("✅ MySQL environment configuration saved to .env file")
    print()
    print("Next steps:")
    print("1. Make sure MySQL server is running on your local machine")
    print("2. Create the database if it doesn't exist:")
    print(f"   CREATE DATABASE {mysql_config['MYSQL_DATABASE']};")
    print("3. Restart the application to use MySQL database")
    print()
    print("The application will now prioritize MySQL over PostgreSQL and SQLite")

def test_mysql_connection():
    """Test MySQL connection with current settings"""
    try:
        from sqlalchemy import create_engine, text
        
        # Load environment variables from .env if it exists
        if os.path.exists('.env'):
            with open('.env', 'r') as f:
                for line in f:
                    if '=' in line and not line.strip().startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
        
        # Get MySQL config from environment
        mysql_config = {
            'host': os.environ.get('MYSQL_HOST', 'localhost'),
            'port': os.environ.get('MYSQL_PORT', '3306'),
            'user': os.environ.get('MYSQL_USER', 'root'),
            'password': os.environ.get('MYSQL_PASSWORD', 'root@123'),
            'database': os.environ.get('MYSQL_DATABASE', 'wms_db_dev')
        }
        
        database_url = f"mysql+pymysql://{mysql_config['user']}:{mysql_config['password']}@{mysql_config['host']}:{mysql_config['port']}/{mysql_config['database']}"
        
        print("Testing MySQL connection...")
        engine = create_engine(database_url, connect_args={'connect_timeout': 5})
        with engine.connect() as conn:
            result = conn.execute(text("SELECT VERSION() as version"))
            version = result.fetchone()[0]
            print(f"✅ MySQL connection successful!")
            print(f"   MySQL Version: {version}")
            print(f"   Database: {mysql_config['database']}")
            return True
            
    except Exception as e:
        print(f"❌ MySQL connection failed: {e}")
        print()
        print("Make sure:")
        print("1. MySQL server is running")
        print("2. Database exists")
        print("3. User has proper permissions")
        print("4. Connection details are correct")
        return False

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        test_mysql_connection()
    else:
        setup_mysql_environment()
        print()
        if input("Test MySQL connection now? (y/n): ").strip().lower() == 'y':
            test_mysql_connection()